using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libglpk"], :libglpk),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/juan-pablo-vielma/GLPKBuilder/releases/download/v0.0.1-alpha"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
                        
    Linux(:aarch64, :glibc) => ("$bin_prefix/GLPKBuilder.v1.0.0.aarch64-linux-gnu.tar.gz", "3849ad43d1341a33d0e751426587d7ded977ed27405bc444a60b7e112b931b97"),
    Linux(:aarch64, :musl) => ("$bin_prefix/GLPKBuilder.v1.0.0.aarch64-linux-musl.tar.gz", "3dfff064bfb0f4721be1f85268285168896c0f6c02eb48334a3d0c455f5d6ef2"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/GLPKBuilder.v1.0.0.arm-linux-gnueabihf.tar.gz", "d2108046da25a188884566ddef0cb80605bc6c34644c1c7665a8a5942939ebb6"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/GLPKBuilder.v1.0.0.arm-linux-musleabihf.tar.gz", "ba7fb741fbbd9315ba81974852180e7723abb78bdd8eb1146347c5f4779ddcd4"),
    Linux(:i686, :glibc) => ("$bin_prefix/GLPKBuilder.v1.0.0.i686-linux-gnu.tar.gz", "49888c22cfc56327b074acb2d72938b6405157aafcd843fa448de895125440a1"),
    Linux(:i686, :musl) => ("$bin_prefix/GLPKBuilder.v1.0.0.i686-linux-musl.tar.gz", "66cabefbb0833dc60e8145aa8bcda6e41626563e93fdd8e49e8a9ed4fd9fec5f"),
    Windows(:i686) => ("$bin_prefix/GLPKBuilder.v1.0.0.i686-w64-mingw32.tar.gz", "2dd4082d8b2d6d4c89fa08c97142130538ad198f719738ab9860d93db84a592e"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/GLPKBuilder.v1.0.0.powerpc64le-linux-gnu.tar.gz", "99906f92e2b53ba49c3471059e6f5b399485fe97a05d13841c5bcc3b293b6813"),
    MacOS(:x86_64) => ("$bin_prefix/GLPKBuilder.v1.0.0.x86_64-apple-darwin14.tar.gz", "c9e235d50c01309672c697dfcb0739a862965ed8c347431fec85c645410a3b6e"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/GLPKBuilder.v1.0.0.x86_64-linux-gnu.tar.gz", "dd417032f9457967cd267af3d525c476eb03ca9d602bcc4a861b34a9785ae3cf"),
    Linux(:x86_64, :musl) => ("$bin_prefix/GLPKBuilder.v1.0.0.x86_64-linux-musl.tar.gz", "f9221f383211018e3884da985315090305518f250d4d9555aba4b1dc9f8d2600"),
    Windows(:x86_64) => ("$bin_prefix/GLPKBuilder.v1.0.0.x86_64-w64-mingw32.tar.gz", "956b7bec63c2305f72bf8c0bbfde8316291a802fe8c57be405878e11f6a541eb"),#"aed08680dcde306855f594675226e01fa9ffe9f2e3f137ea273f48ff0030424d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
